[1mdiff --git a/step-core/src/main/resources/com/tyndalehouse/step/core/service/jsword/impl/default.xsl b/step-core/src/main/resources/com/tyndalehouse/step/core/service/jsword/impl/default.xsl[m
[1mindex a7e39b2..1bd0c65 100644[m
[1m--- a/step-core/src/main/resources/com/tyndalehouse/step/core/service/jsword/impl/default.xsl[m
[1m+++ b/step-core/src/main/resources/com/tyndalehouse/step/core/service/jsword/impl/default.xsl[m
[36m@@ -1,1883 +1,1904 @@[m
[31m-<?xml version="1.0"?>[m
[31m-<!--[m
[31m- * Distribution License:[m
[31m- * JSword is free software; you can redistribute it and/or modify it under[m
[31m- * the terms of the GNU Lesser General Public License, version 2.1 as published by[m
[31m- * the Free Software Foundation. This program is distributed in the hope[m
[31m- * that it will be useful, but WITHOUT ANY WARRANTY; without even the[m
[31m- * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.[m
[31m- * See the GNU Lesser General Public License for more details.[m
[31m- *[m
[31m- * The License is available on the internet at:[m
[31m- *       http://www.gnu.org/copyleft/lgpl.html[m
[31m- * or by writing to:[m
[31m- *      Free Software Foundation, Inc.[m
[31m- *      59 Temple Place - Suite 330[m
[31m- *      Boston, MA 02111-1307, USA[m
[31m- *[m
[31m- * Copyright: 2005[m
[31m- *     The copyright to this program is held by it's authors.[m
[31m- *[m
[31m- * ID: $Id: simple.xsl 2226 2012-02-02 19:25:21Z dmsmith $[m
[31m- -->[m
[31m- <!--[m
[31m- * Transforms OSIS to HTML for viewing within JSword browsers.[m
[31m- * Note: There are custom protocols which the browser must handle.[m
[31m- * [m
[31m- * @see gnu.lgpl.License for license details.[m
[31m- *      The copyright to this program is held by it's authors.[m
[31m- * @author Joe Walker [joe at eireneh dot com][m
[31m- * @author DM Smith [dmsmith555 at yahoo dot com][m
[31m- * @author Chris Burrell [chris at burrell dot me dot uk] [m
[31m- -->[m
[31m- <xsl:stylesheet[m
[31m-  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"[m
[31m-  version="1.0"[m
[31m-  xmlns:jsword="http://xml.apache.org/xalan/java"[m
[31m-  xmlns:interleaving="xalan://com.tyndalehouse.step.core.xsl.impl.InterleavingProviderImpl"[m
[31m-  xmlns:conversion="xalan://com.tyndalehouse.step.core.utils.StringConversionUtils"[m
[31m-  xmlns:jswordUtils="xalan://com.tyndalehouse.step.core.utils.JSwordUtils"[m
[31m-  xmlns:url="http://whatever/java/java.net.URLEncoder"[m
[31m-  xmlns:stringUtils="xalan://com.tyndalehouse.step.core.utils.StringUtils"[m
[31m-  extension-element-prefixes="jsword interleaving conversion url stringUtils">[m
[31m-[m
[31m-  <!--  Version 3.0 is necessary to get br to work correctly. -->[m
[31m-  <xsl:output method="html" version="3.0" omit-xml-declaration="yes" indent="no"/>[m
[31m-[m
[31m-  <!-- Be very careful about introducing whitespace into the document.[m
[31m-       strip-space merely remove space between one tag and another tag.[m
[31m-       This may cause significant whitespace to be removed.[m
[31m-       [m
[31m-       It is easy to have apply-templates on a line to itself which if[m
[31m-       it encounters text before anything else will introduce whitespace.[m
[31m-       With the browser we are using, span will introduce whitespace[m
[31m-       but font does not. Therefore we use font as a span.[m
[31m-    -->[m
[31m-  <!-- gdef and hdef refer to hebrew and greek definitions keyed by strongs -->[m
[31m-  <!-- The absolute base for relative references. -->[m
[31m-  <xsl:param name="greek.def.protocol" select="'gdef:'"/>[m
[31m-  <xsl:param name="hebrew.def.protocol" select="'hdef:'"/>[m
[31m-  <xsl:param name="lex.def.protocol" select="'lex:'"/>[m
[31m-  <!-- currently these are not used, but they are for morphologic forms -->[m
[31m-  <xsl:param name="greek.morph.protocol" select="'gmorph:'"/>[m
[31m-  <xsl:param name="hebrew.morph.protocol" select="'hmorph:'"/>[m
[31m-[m
[31m-  <!-- The absolute base for relative references. -->[m
[31m-  <xsl:param name="baseURL" select="''"/>[m
[31m-[m
[31m-  <!-- Whether to display Jesus' words in red or not -->[m
[31m-  <xsl:param name="RedLetterText" select="'false'" />[m
[31m-[m
[31m-  <!-- Whether to start each verse on an new line or not -->[m
[31m-  <xsl:param name="VLine" select="'false'"/>[m
[31m-[m
[31m-  <!-- Whether to show non-canonical "headings" or not -->[m
[31m-  <xsl:param name="Headings" select="'false'"/>[m
[31m-  <xsl:param name="DivideHebrew" select="'false'" />[m
[31m-[m
[31m-	<!--  This is set if we are interested in a preview only and the x-gen information is of no interest. -->[m
[31m-  <xsl:param name="Preview" select="'false'"/>[m
[31m-[m
[31m-  <!-- Whether to show notes or not -->[m
[31m-  <xsl:param name="Notes" select="'false'"/>[m
[31m-[m
[31m-  <!-- Whether to have linking cross references or not -->[m
[31m-  <xsl:param name="XRef" select="'false'"/>[m
[31m-[m
[31m-  <!-- Whether to output Verse numbers or not -->[m
[31m-  <xsl:param name="VNum" select="'false'"/>[m
[31m-[m
[31m-  <!-- Whether to output Chapter and Verse numbers or not -->[m
[31m-  <xsl:param name="CVNum" select="'false'"/>[m
[31m-[m
[31m-  <!-- Whether to output Book, Chapter and Verse numbers or not -->[m
[31m-  <xsl:param name="BCVNum" select="'false'"/>[m
[31m-[m
[31m-  <!-- Whether to output superscript verse numbers or normal size ones -->[m
[31m-  <xsl:param name="TinyVNum" select="'false'"/>[m
[31m-[m
[31m-  <!-- The default versification -->[m
[31m-  <xsl:param name="v11n" select="'KJV'"/>[m
[31m-[m
[31m-  <!-- The order of display. Hebrew is rtl (right to left) -->[m
[31m-  <xsl:param name="direction" select="'ltr'"/>[m
[31m-[m
[31m-  <!--  true to display color coding information -->[m
[31m-  <xsl:param name="ColorCoding" select="'false'" />[m
[31m-  <xsl:param name="RemovePointing" select="'true'" />[m
[31m-  <xsl:param name="RemoveVowels" select="'true'" />[m
[31m-  <xsl:param name="HideCompareHeaders" select="'false'" />[m
[31m-[m
[31m-  <xsl:param name="HideXGen" select="'false'" />[m
[31m-[m
[31m-  <xsl:param name="baseVersion" select="''" />[m
[31m-  <xsl:param name="Interleave" select="'false'" />[m
[31m-  <xsl:param name="interleavingProvider" />[m
[31m-  <xsl:param name="comparing" select="false()" />[m
[31m-  <xsl:param name="colorCodingProvider" />[m
[31m-  <xsl:param name="xrefProvider" />[m
[31m-  [m
[31m-[m
[31m-  <!-- Create a global key factory from which OSIS ids will be generated -->[m
[31m-  <xsl:variable name="keyf" select="jsword:org.crosswire.jsword.passage.PassageKeyFactory.instance()"/>[m
[31m-  <xsl:variable name="v11nf" select="jsword:org.crosswire.jsword.versification.system.Versifications.instance()"/>[m
[31m-  <xsl:variable name="versification" select="jsword:getVersification($v11nf, $v11n)"/>[m
[31m-[m
[31m-  <!-- Create a global number shaper that can transform 0-9 into other number systems. -->[m
[31m-  <xsl:variable name="shaper" select="jsword:org.crosswire.common.icu.NumberShaper.new()"/>[m
[31m-[m
[31m-[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="/">[m
[31m-      <div class="passageContentHolder" >[m
[31m-        <!-- If there are notes, output a table with notes in the 2nd column. -->[m
[31m-        <!-- There is a rendering bug which prevents the notes from adhering to the right edge. -->[m
[31m-        <xsl:choose>[m
[31m-          <xsl:when test="$Notes = 'true' and //note[not(@type = 'x-strongsMarkup')]">[m
[31m-            <xsl:choose>[m
[31m-              <xsl:when test="$direction != 'rtl'">[m
[31m-                <div class="notesPane">[m
[31m-                      <xsl:apply-templates select="//verse|//title" mode="print-cross-references"/>[m
[31m-                </div>[m
[31m-              </xsl:when>[m
[31m-              <xsl:otherwise>[m
[31m-                <div class="notesPane">[m
[31m-                  <!-- In a right to left, the alignment should be reversed too -->[m
[31m-                      <p>&#160;</p>[m
[31m-                      <xsl:apply-templates select="//note" mode="print-cross-references"/>[m
[31m-				</div>[m
[31m-              </xsl:otherwise>[m
[31m-            </xsl:choose>[m
[31m-          </xsl:when>[m
[31m-        </xsl:choose>[m
[31m-	      <xsl:apply-templates/>[m
[31m-      </div>[m
[31m-      [m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <!--[m
[31m-    == A proper OSIS document has osis as its root.[m
[31m-    == We dig deeper for its content.[m
[31m-    -->[m
[31m-  <xsl:template match="osis">[m
[31m-    <xsl:apply-templates/>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <!--[m
[31m-    == An OSIS document may contain more that one work.[m
[31m-    == Each work is held in an osisCorpus element.[m
[31m-    == If there is only one work, then this element will (should) be absent.[m
[31m-    == Process each document in turn.[m
[31m-    == It might be reasonable to dig into the header element of each work[m
[31m-    == and get its title.[m
[31m-    == Otherwise, we ignore the header and work elements and just process[m
[31m-    == the osisText elements.[m
[31m-    -->[m
[31m-  <xsl:template match="osisCorpus">[m
[31m-    <xsl:apply-templates select="osisText"/>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <!--[m
[31m-    == Each work has an osisText element.[m
[31m-    == We ignore the header and work elements and process its div elements.[m
[31m-    == While divs can be milestoned, the osisText element requires container[m
[31m-    == divs.[m
[31m-    -->[m
[31m-  <xsl:template match="osisText">[m
[31m-    <xsl:apply-templates select="div"/>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <!-- Ignore headers and its elements -->[m
[31m-  <xsl:template match="header"/>[m
[31m-  <xsl:template match="revisionDesc"/>[m
[31m-  <xsl:template match="work"/>[m
[31m-   <!-- <xsl:template match="title"/> who's parent is work -->[m
[31m-  <xsl:template match="contributor"/>[m
[31m-  <xsl:template match="creator"/>[m
[31m-  <xsl:template match="subject"/>[m
[31m-  <!-- <xsl:template match="date"/> who's parent is work -->[m
[31m-  <xsl:template match="description"/>[m
[31m-  <xsl:template match="publisher"/>[m
[31m-  <xsl:template match="type"/>[m
[31m-  <xsl:template match="format"/>[m
[31m-  <xsl:template match="identifier"/>[m
[31m-  <xsl:template match="source"/>[m
[31m-  <xsl:template match="language"/>[m
[31m-  <xsl:template match="relation"/>[m
[31m-  <xsl:template match="coverage"/>[m
[31m-  <xsl:template match="rights"/>[m
[31m-  <xsl:template match="scope"/>[m
[31m-  <xsl:template match="workPrefix"/>[m
[31m-  <xsl:template match="castList"/>[m
[31m-  <xsl:template match="castGroup"/>[m
[31m-  <xsl:template match="castItem"/>[m
[31m-  <xsl:template match="actor"/>[m
[31m-  <xsl:template match="role"/>[m
[31m-  <xsl:template match="roleDesc"/>[m
[31m-  <xsl:template match="teiHeader"/>[m
[31m-  <xsl:template match="refSystem"/>[m
[31m-[m
[31m-[m
[31m-  <!-- Ignore titlePage -->[m
[31m-  <xsl:template match="titlePage"/>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <!-- [m
[31m-    == Div provides the major containers for a work.[m
[31m-    == Divs are milestoneable.[m
[31m-    -->[m
[31m-  <xsl:template match="div[@type='x-center']">[m
[31m-    <div align="center">[m
[31m-      <xsl:apply-templates/>[m
[31m-    </div>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-    [m
[31m-  <xsl:template match="div[@type='colophon']">[m
[31m-  	<span class='colophon'>[m
[31m-    	<xsl:apply-templates/>[m
[31m-    </span>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-    <xsl:template match="div[@type='introduction'][@sID]">[m
[31m-        &lt;span class='introduction'&gt;[m
[31m-    </xsl:template>[m
[31m-[m
[31m-    <xsl:template match="div[@type='introduction'][@eID]">[m
[31m-        &lt;/span&gt;[m
[31m-    </xsl:template>[m
[31m-    <xsl:template match="div[@type='paragraph'][@sID]"><span class="paragraph"></span></xsl:template>[m
[31m-    <xsl:template match="div[@type='paragraph'][@eID]">[m
[31m-        <br />[m
[31m-    </xsl:template>    [m
[31m-    <xsl:template match="div[@subType='x-duplicate']">[m
[31m-        <span class="duplicate">[m
[31m-            <span class="versification-notice duplicate-notice" international="duplicate_notice">*</span>[m
[31m-            <xsl:apply-templates/>[m
[31m-        </span>[m
[31m-    </xsl:template>[m
[31m-[m
[31m-    <xsl:template match="div[@subType='x-omitted-verses']">[m
[31m-        <span class="versification-notice" international="omitted_notice">*</span>[m
[31m-        <xsl:apply-templates/>[m
[31m-    </xsl:template>[m
[31m-[m
[31m-[m
[31m-    <xsl:template match="div">[m
[31m-    <xsl:apply-templates/>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="div" mode="jesus">[m
[31m-    <xsl:apply-templates mode="jesus"/>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <!-- Handle verses as containers and as a start verse.                     -->[m
[31m-  <xsl:template match="verse[not(@eID)]">[m
[31m-    <!-- output each preverse element in turn -->[m
[31m-    <xsl:for-each select=".//*[@subType = 'x-preverse' or @subtype = 'x-preverse']">[m
[31m-      <xsl:choose>[m
[31m-        <xsl:when test="local-name() = 'title'">[m
[31m-          <!-- Always show canonical titles or if headings is turned on -->[m
[31m-          <xsl:if test="@canonical = 'true' or $Headings = 'true'">[m
[31m-            <h3 class="heading {@type}"><xsl:apply-templates /></h3>[m
[31m-          </xsl:if>[m
[31m-        </xsl:when>[m
[31m-        <xsl:otherwise>[m
[31m-          <xsl:apply-templates />[m
[31m-        </xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-    </xsl:for-each>[m
[31m-    <!-- Handle the KJV paragraph marker. -->[m
[31m-    <xsl:if test="milestone[@type = 'x-p']"><p /></xsl:if>[m
[31m-    <!-- If the verse doesn't start on its own line and -->[m
[31m-    <!-- the verse is not the first verse of a set of siblings, -->[m
[31m-    <!-- output an extra space. -->[m
[31m-    <!--<xsl:if test="$VLine = 'false' and preceding-sibling::*[local-name() = 'verse']">-->[m
[31m-      <!--<xsl:text>&#160;</xsl:text>-->[m
[31m-    <!--</xsl:if>-->[m
[31m-    [m
[31m-    <!--  set up the direction variable -->[m
[31m-    <xsl:variable name="cell-direction">[m
[31m-			<xsl:if test="./ancestor::cell/@xml:lang">[m
[31m-				<xsl:call-template name="getDirection">[m
[31m-					<xsl:with-param name="lang">[m
[31m-						<xsl:value-of select="./ancestor::cell/@xml:lang" />[m
[31m-					</xsl:with-param>[m
[31m-				</xsl:call-template>[m
[31m-			</xsl:if>[m
[31m-	</xsl:variable>[m
[31m-   	<xsl:variable name="languageDirection">[m
[31m-   		<xsl:choose>[m
[31m-   			<xsl:when test="./ancestor::cell/@xml:lang">[m
[31m-   				<xsl:value-of select="$cell-direction" />[m
[31m-   			</xsl:when>[m
[31m-   			<xsl:otherwise>[m
[31m-   				<xsl:value-of select="$direction" />[m
[31m-   			</xsl:otherwise>[m
[31m-   		</xsl:choose>[m
[31m-   	</xsl:variable>[m
[31m-   	    	[m
[31m-    <!-- Always output the verse number -->[m
[31m-    <xsl:choose>[m
[31m-      <xsl:when test=".//cell">[m
[31m-          <div class="verse l {$languageDirection}Direction containsTable" dir="{$languageDirection}"><a name="{@osisID}"><xsl:call-template name="versenum"/></a><xsl:apply-templates/></div>[m
[31m-      </xsl:when>[m
[31m-      <xsl:when test="$VLine = 'true' or .//cell">[m
[31m-        <div class="verse l {$languageDirection}Direction" dir="{$languageDirection}"><a name="{@osisID}"><xsl:call-template name="versenum"/></a><xsl:apply-templates/></div>[m
[31m-      </xsl:when>[m
[31m-      <xsl:otherwise>[m
[31m-        <span class="verse {$languageDirection}Direction" dir="{$languageDirection}"><xsl:call-template name="versenum"/><xsl:apply-templates/></span>[m
[31m-        <!-- Follow the verse with an extra space -->[m
[31m-        <!-- when they don't start on lines to themselves -->[m
[31m-        <xsl:text> </xsl:text>[m
[31m-      </xsl:otherwise>[m
[31m-    </xsl:choose>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="verse[not(@eID)]" mode="jesus">[m
[31m-    <!-- If the verse doesn't start on its own line and -->[m
[31m-    <!-- the verse is not the first verse of a set of siblings, -->[m
[31m-    <!-- output an extra space. -->[m
[31m-    <xsl:if test="$VLine = 'false' and preceding-sibling::*[local-name() = 'verse']">[m
[31m-      <xsl:text>&#160;</xsl:text>[m
[31m-    </xsl:if>[m
[31m-    <xsl:variable name="title" select=".//title"/>[m
[31m-    <xsl:if test="string-length($title) > 0">[m
[31m-      <h3 class="heading {@type}"><xsl:value-of select="$title"/></h3>[m
[31m-    </xsl:if>[m
[31m-    <!-- Handle the KJV paragraph marker. -->[m
[31m-    <xsl:if test="milestone[@type = 'x-p']"><p /></xsl:if>[m
[31m-    <!-- Always output the verse -->[m
[31m-    <xsl:choose>[m
[31m-      <xsl:when test="$VLine = 'true'">[m
[31m-        <div class="l"><a class="verseLink" name="{@osisID}"><xsl:call-template name="versenum"/></a><xsl:apply-templates mode="jesus"/></div>[m
[31m-      </xsl:when>[m
[31m-      <xsl:otherwise>[m
[31m-        <xsl:call-template name="versenum"/><xsl:apply-templates mode="jesus"/>[m
[31m-        <!-- Follow the verse with an extra space -->[m
[31m-        <!-- when they don't start on lines to themselves -->[m
[31m-        <xsl:text> </xsl:text>[m
[31m-      </xsl:otherwise>[m
[31m-    </xsl:choose>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-[m
[31m-  <xsl:template match="verse" mode="print-cross-references">[m
[31m-    <xsl:if test=".//note[@type = 'crossReference']">[m
[31m-      <xsl:variable name="passage" select="jswordUtils:getSafeKey($versification, @osisID)"/>[m
[31m-      <a href="#{substring-before(concat(@osisID, ' '), ' ')}">[m
[31m-        <xsl:value-of select="jsword:getName($passage)"/>[m
[31m-      </a>[m
[31m-      <xsl:apply-templates select=".//note[@type = 'crossReference']" mode="print-cross-references" />[m
[31m-      <div><xsl:text>&#160;</xsl:text></div>[m
[31m-    </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="verse" mode="print-notes">[m
[31m-    <xsl:if test=".//note[not(@type) or not(@type = 'x-strongsMarkup')]">[m
[31m-      <xsl:variable name="passage" select="jswordUtils:getSafeKey($versification, @osisID)"/>[m
[31m-      <a href="#{substring-before(concat(@osisID, ' '), ' ')}">[m
[31m-        <xsl:value-of select="jsword:getName($passage)"/>[m
[31m-      </a>[m
[31m-      <xsl:apply-templates select=".//note" mode="print-notes" />[m
[31m-      <div><xsl:text>&#160;</xsl:text></div>[m
[31m-    </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-[m
[31m-  <xsl:template name="interleavedVerseNum">[m
[31m-	<xsl:param name="verse" />[m
[31m-      <xsl:if test="$VNum = 'true'">[m
[31m-        <h4 class='heading'>[m
[31m-            <xsl:call-template name="intertwinedVerseNum">[m
[31m-                <xsl:with-param name="verse" select="$verse" />[m
[31m-                <xsl:with-param name="includeBook" select="true()" />[m
[31m-            </xsl:call-template>[m
[31m-        </h4>[m
[31m-      </xsl:if>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-	<xsl:template name="columnVerseNumber">[m
[31m-		<xsl:param name="verse" />[m
[31m-		<th class='headingVerseNumber'>[m
[31m-            <xsl:if test="$VNum = 'true'">[m
[31m-                <xsl:call-template name="intertwinedVerseNum">[m
[31m-                    <xsl:with-param name="verse" select="$verse" />[m
[31m-                    <xsl:with-param name="includeBook" select="true()" />[m
[31m-                </xsl:call-template>[m
[31m-            </xsl:if>[m
[31m-		</th>[m
[31m-	</xsl:template>[m
[31m-  [m
[31m-  [m
[31m-  <xsl:template name="intertwinedVerseNum">[m
[31m-  		<xsl:param name="verse" />[m
[31m-  		<xsl:param name="includeBook" />[m
[31m-  		[m
[31m-		<xsl:variable name="firstOsisID" select="substring-before(concat($verse/@osisID, ' '), ' ')"/>[m
[31m-        <a class="verseLink" name="{$firstOsisID}">[m
[31m-	        <xsl:if test="normalize-space($firstOsisID) != ''" >[m
[31m-		        <xsl:variable name="book" select="substring-before($firstOsisID, '.')"/>[m
[31m-				<xsl:variable name="chapter" select="jsword:shape($shaper, substring-before(substring-after($firstOsisID, '.'), '.'))"/>[m
[31m-				<xsl:variable name="verse">[m
[31m-				  <xsl:choose>[m
[31m-				    <xsl:when test="@n">[m
[31m-				      <xsl:value-of select="jsword:shape($shaper, string(@n))"/>[m
[31m-				    </xsl:when>[m
[31m-				    <xsl:otherwise>[m
[31m-				      <xsl:value-of select="jsword:shape($shaper, substring-after(substring-after($firstOsisID, '.'), '.'))"/>[m
[31m-				    </xsl:otherwise>[m
[31m-				  </xsl:choose>[m
[31m-				</xsl:variable>[m
[31m-				[m
[31m-				<xsl:choose>[m
[31m-					<xsl:when test="$includeBook = true()">[m
[31m-		  				<span class="verseNumber"><xsl:value-of select="concat($book, ' ', $chapter, ':', $verse)"/></span>[m
[31m-					</xsl:when>[m
[31m-					<xsl:otherwise>[m
[31m-		  				<span class="verseNumber"><xsl:value-of select="concat($chapter, ':', $verse)"/></span>[m
[31m-					</xsl:otherwise>[m
[31m-				</xsl:choose>[m
[31m-	        </xsl:if>[m
[31m-        </a>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template name="interleavedVersion">[m
[31m- 		<xsl:if test="$Interleave = 'true'">[m
[31m-            <xsl:variable name="version" select="interleaving:getNextVersion($interleavingProvider)" />[m
[31m- 			<span class="smallResultKey" data-version="{$version}">(<xsl:value-of select="$version" />)</span>[m
[31m- 		</xsl:if>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template name="versenum">[m
[31m-      <xsl:if test="not(./ancestor::row)">[m
[31m-  	<!-- we output version names not verse numbers for interleaved translations -->[m
[31m-  		    <!-- Are verse numbers wanted? -->[m
[31m-		    <xsl:if test="$VNum = 'true'">[m
[31m-		      <!-- An osisID can be a space separated list of them -->[m
[31m-		      <xsl:variable name="firstOsisID" select="substring-before(concat(@osisID, ' '), ' ')"/>[m
[31m-		      <xsl:variable name="book" select="substring-before($firstOsisID, '.')"/>[m
[31m-		      <xsl:variable name="chapter" select="jsword:shape($shaper, substring-before(substring-after($firstOsisID, '.'), '.'))"/>[m
[31m-		      <!-- If n is present use it for the number -->[m
[31m-		      <xsl:variable name="verse">[m
[31m-		        <xsl:choose>[m
[31m-		          <xsl:when test="@n">[m
[31m-		            <xsl:value-of select="jsword:shape($shaper, string(@n))"/>[m
[31m-		          </xsl:when>[m
[31m-		          <xsl:otherwise>[m
[31m-		            <xsl:value-of select="jsword:shape($shaper, substring-after(substring-after($firstOsisID, '.'), '.'))"/>[m
[31m-		          </xsl:otherwise>[m
[31m-		        </xsl:choose>[m
[31m-		      </xsl:variable>[m
[31m-		      <xsl:variable name="versenum">[m
[31m-		        <xsl:choose>[m
[31m-		          <xsl:when test="$BCVNum = 'true'">[m
[31m-				      <xsl:variable name="passage" select="jswordUtils:getSafeKey($versification, @osisID)"/>[m
[31m-		              <xsl:value-of select="jsword:getName($passage)"/>[m
[31m-		          </xsl:when>[m
[31m-		          <xsl:when test="$CVNum = 'true'">[m
[31m-		            <xsl:value-of select="concat($chapter, ' : ', $verse)"/>[m
[31m-		          </xsl:when>[m
[31m-		          <xsl:otherwise>[m
[31m-		            <xsl:value-of select="$verse"/>[m
[31m-		          </xsl:otherwise>[m
[31m-		        </xsl:choose>[m
[31m-		      </xsl:variable>[m
[31m-		      <!--[m
[31m-		        == Surround versenum with dup[m
[31m-		        -->[m
[31m-		      <xsl:choose>[m
[31m-		        <xsl:when test="$TinyVNum = 'true' and $Notes = 'true'">[m
[31m-		          <a class="verseLink" name="{@osisID}"><span class="verseNumber"><xsl:value-of select="$versenum"/>&#160;</span></a>[m
[31m-		        </xsl:when>[m
[31m-		        <xsl:when test="$TinyVNum = 'true' and $Notes = 'false'">[m
[31m-		          <a class="verseLink" name="{@osisID}"><span class="verseNumber"><xsl:value-of select="$versenum"/>&#160;</span></a>[m
[31m-		        </xsl:when>[m
[31m-		        <xsl:when test="$TinyVNum = 'false' and $Notes = 'true'">[m
[31m-		          <a class="verseLink" name="{@osisID}">(<xsl:value-of select="$versenum"/>)</a>[m
[31m-		          <xsl:text> </xsl:text>[m
[31m-		        </xsl:when>[m
[31m-		        <xsl:otherwise>[m
[31m-                    <a class="verseLink" name="{@osisID}"><span class="verseNumber"><xsl:value-of select="$versenum"/></span></a>[m
[31m-		          <xsl:text> </xsl:text>[m
[31m-		        </xsl:otherwise>[m
[31m-		      </xsl:choose>[m
[31m-		    </xsl:if>[m
[31m-		    <xsl:if test="$VNum = 'false' and $Notes = 'true'">[m
[31m-		      <a class="verseLink" name="{@osisID}"></a>[m
[31m-		    </xsl:if>[m
[31m-      </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="a">[m
[31m-    <a href="{@href}"><xsl:apply-templates/></a>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="a" mode="jesus">[m
[31m-    <a href="{@href}"><xsl:apply-templates mode="jesus"/></a>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <!-- When we encounter a note, we merely output a link to the note. -->[m
[31m-  <xsl:template match="note[@type = 'x-strongsMarkup']"/>[m
[31m-  <xsl:template match="note[@type = 'x-strongsMarkup']" mode="jesus"/>[m
[31m-  <xsl:template match="note[@type = 'x-strongsMarkup']" mode="print-notes"/>[m
[31m-[m
[31m-  <xsl:template match="note">[m
[31m-      <xsl:text> </xsl:text>[m
[31m-    <xsl:if test="$Notes = 'true'">[m
[31m-      <!-- If there is a following sibling that is a note, emit a separator -->[m
[31m-      <xsl:variable name="siblings" select="../child::node()"/>[m
[31m-      <xsl:variable name="next-position">[m
[31m-        <xsl:choose>[m
[31m-            <xsl:when test="normalize-space(./following-sibling::node()) = ','"><xsl:value-of select="position() + 2" /></xsl:when>[m
[31m-            <xsl:otherwise><xsl:value-of select="position() + 1" /></xsl:otherwise>[m
[31m-        </xsl:choose> [m
[31m-      </xsl:variable>[m
[31m-      <xsl:choose>[m
[31m-        <xsl:when test="name($siblings[number($next-position)]) = 'note'">[m
[31m-        	<xsl:choose>[m
[31m-        		<xsl:when test="@type = 'crossReference'">[m
[31m-		           <sup class="note"><a href="javascript:void(0)" noteType='{@type}' xref="{@osisID}" ref="{@osisRef}"><xsl:call-template name="generateNoteXref"/></a>, </sup>[m
[31m-        		</xsl:when>[m
[31m-	    		<xsl:otherwise>[m
[31m-					 <sup class="note">[m
[31m-					 	<a href="javascript:void(0)" noteType='{@type}' xref="{@osisID}" ref="{@osisRef}">[m
[31m-					 		<xsl:call-template name="generateNoteXref"/>[m
[31m-					 	</a>[m
[31m-				 		<span class="inlineNote"><xsl:apply-templates select="." mode="print-notes" /></span>[m
[31m-				 	, </sup>[m
[31m-        		</xsl:otherwise>[m
[31m-        	</xsl:choose>[m
[31m-        </xsl:when>[m
[31m-        <xsl:otherwise>[m
[31m-        	<xsl:choose>[m
[31m-        		<xsl:when test="@type = 'crossReference'">[m
[31m-                    <sup class="note"><a href="javascript:void(0)" noteType='{@type}' xref="{@osisID}" ref="{@osisRef}"><xsl:call-template name="generateNoteXref"/></a>&amp;nbsp;</sup>[m
[31m-        		</xsl:when>[m
[31m-        		<xsl:otherwise>[m
[31m-					 <sup class="note">[m
[31m-					 	<a href="javascript:void(0)" noteType='{@type}' xref="{@osisID}" ref="{@osisRef}">[m
[31m-					 		<xsl:call-template name="generateNoteXref"/>[m
[31m-					 	</a>[m
[31m-				 		<span class="inlineNote"><xsl:apply-templates select="." mode="print-notes" /></span>[m
[31m-					 </sup>[m
[31m-        		</xsl:otherwise>[m
[31m-        	</xsl:choose>[m
[31m-        </xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-    </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="note" mode="jesus">[m
[31m-    <xsl:if test="$Notes = 'true'">[m
[31m-      <!-- If there is a following sibling that is a note, emit a separator -->[m
[31m-      <xsl:variable name="siblings" select="../child::node()"/>[m
[31m-      <xsl:variable name="next-position">[m
[31m-        <xsl:choose>[m
[31m-            <xsl:when test="normalize-space(./following-sibling::node()) = ','"><xsl:value-of select="position() + 2" /></xsl:when>[m
[31m-            <xsl:otherwise><xsl:value-of select="position() + 1" /></xsl:otherwise>[m
[31m-        </xsl:choose>[m
[31m-      </xsl:variable>[m
[31m-      <xsl:choose>[m
[31m-        <xsl:when test="name($siblings[$next-position]) = 'note'">[m
[31m-        	<xsl:choose>[m
[31m-        		<xsl:when test="@type = 'crossReference'">[m
[31m-		           <sup class="note"><a href="javascript:void(0)" noteType='{@type}' xref="{@osisID}" ref="{@osisRef}"><xsl:call-template name="generateNoteXref"/></a>, </sup>[m
[31m-        		</xsl:when>[m
[31m-	    		<xsl:otherwise>[m
[31m-					 <sup class="note">[m
[31m-					 	<a href="javascript:void(0)" noteType='{@type}' xref="{@osisID}" ref="{@osisRef}">[m
[31m-					 		<xsl:call-template name="generateNoteXref"/>[m
[31m-					 	</a>[m
[31m-				 		<span class="inlineNote"><xsl:apply-templates select="." mode="print-notes" /></span>[m
[31m-				 	, </sup>[m
[31m-        		</xsl:otherwise>[m
[31m-        	</xsl:choose>[m
[31m-        </xsl:when>[m
[31m-        <xsl:otherwise>[m
[31m-        	<xsl:choose>[m
[31m-        		<xsl:when test="@type = 'crossReference'">[m
[31m-		           <sup class="note"><a href="javascript:void(0)" noteType='{@type}' xref="{@osisID}" ref="{@osisRef}"><xsl:call-template name="generateNoteXref"/></a></sup>[m
[31m-        		</xsl:when>[m
[31m-        		<xsl:otherwise>[m
[31m-					 <sup class="note">[m
[31m-					 	<a href="javascript:void(0)" noteType='{@type}' xref="{@osisID}" ref="{@osisRef}">[m
[31m-					 		<xsl:call-template name="generateNoteXref"/>[m
[31m-					 	</a>[m
[31m-				 		<span class="inlineNote"><xsl:apply-templates select="." mode="print-notes" /></span>[m
[31m-					 </sup>[m
[31m-        		</xsl:otherwise>[m
[31m-        	</xsl:choose>[m
[31m-        </xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-    </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="note" mode="print-notes">[m
[31m-      <div class="margin">[m
[31m-      <a name="note-{generate-id(.)}" class="sideNote">[m
[31m-          <strong><xsl:call-template name="generateNoteXref"/></strong>[m
[31m-      </a>[m
[31m-      <xsl:choose>[m
[31m-          <xsl:when test=".//rdg[@type='x-qere']">[m
[31m-              <div dir="{$direction}" class="qereDisplay">[m
[31m-                <xsl:apply-templates/>[m
[31m-              </div>[m
[31m-          </xsl:when>[m
[31m-          <xsl:when test=".//rdg[@type='x-accent']">[m
[31m-              <div dir="{$direction}" class="accentDisplay">[m
[31m-                <xsl:apply-templates/>[m
[31m-              </div>[m
[31m-          </xsl:when>[m
[31m-          <xsl:otherwise>[m
[31m-              <xsl:apply-templates/>[m
[31m-          </xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-    </div>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="note" mode="print-cross-references">[m
[31m-	<xsl:if test="@type = 'crossReference'">[m
[31m-	    <div class="margin">[m
[31m-	      <a name="note-{generate-id(.)}" class="sideNote">[m
[31m-              <strong><xsl:call-template name="generateNoteXref"/></strong>[m
[31m-	      </a>[m
[31m-	      <xsl:apply-templates/>[m
[31m-	    </div>[m
[31m-	  </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-[m
[31m-  <!--[m
[31m-    == If the n attribute is present then use that for the cross ref otherwise create a letter.[m
[31m-    == Note: numbering restarts with each verse.[m
[31m-    -->[m
[31m-  <xsl:template name="generateNoteXref">[m
[31m-    <xsl:choose>[m
[31m-      <xsl:when test="@n and @n != ''">[m
[31m-        <xsl:value-of select="@n"/>[m
[31m-      </xsl:when>[m
[31m-      <xsl:otherwise>[m
[31m-        <xsl:number level="any" from="/osis//verse" format="a"/>[m
[31m-      </xsl:otherwise>[m
[31m-    </xsl:choose>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="p">[m
[31m-    <p><xsl:apply-templates/></p>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="p" mode="jesus">[m
[31m-    <p><xsl:apply-templates mode="jesus"/></p>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="p" mode="print-notes">[m
[31m-    <!-- FIXME: This ignores text in the note. -->[m
[31m-    <!-- don't put para's in notes -->[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="w" name="processW">[m
[31m-    <!-- Output the content followed by all the lemmas and then all the morphs. -->[m
[31m-    <xsl:choose>[m
[31m-	    <xsl:when test="normalize-space(@lemma) != '' or normalize-space(@morph) != ''">[m
[31m-    		<xsl:choose>[m
[31m-	    		<xsl:when test="$ColorCoding = 'true'" >[m
[31m-					<xsl:variable name="colorClass" select="jsword:getColorClass($colorCodingProvider, @morph)" />[m
[31m-			    	<xsl:variable name="lemma" select="conversion:getStrongPaddedKey(@lemma)" />[m
[31m-			    	<xsl:choose>[m
[31m-                        <xsl:when test="@morph">[m
[31m-                            <span class="{$colorClass}" strong="{$lemma}" morph="{@morph}"><xsl:apply-templates/></span>[m
[31m-                        </xsl:when>[m
[31m-                        <xsl:otherwise>[m
[31m-                            <span class="{$colorClass}" strong="{$lemma}"><xsl:apply-templates/></span>        [m
[31m-                        </xsl:otherwise>[m
[31m-                    </xsl:choose>[m
[31m-			    </xsl:when>[m
[31m-			    <xsl:otherwise>[m
[31m-			    	<xsl:variable name="lemma" select="conversion:getStrongPaddedKey(@lemma)" />[m
[31m-                    <xsl:choose>[m
[31m-                        <xsl:when test="@morph">[m
[31m-                            <span strong="{$lemma}" morph="{@morph}"><xsl:apply-templates/></span>[m
[31m-                        </xsl:when>[m
[31m-                        <xsl:otherwise>[m
[31m-                            <span strong="{$lemma}"><xsl:apply-templates/></span>[m
[31m-                        </xsl:otherwise>[m
[31m-                    </xsl:choose>[m
[31m-			    </xsl:otherwise>[m
[31m-		    </xsl:choose>[m
[31m-	    </xsl:when>[m
[31m-		<xsl:otherwise>[m
[31m-			<xsl:apply-templates/>[m
[31m-		</xsl:otherwise>[m
[31m-    </xsl:choose>[m
[31m-      <!--[m
[31m-              except when followed by a text node or non-printing node.[m
[31m-              This is true whether the href is output or not.[m
[31m-          -->[m
[31m-      <xsl:variable name="siblings" select="../child::node()"/>[m
[31m-      <xsl:variable name="next-position" select="position() + 1"/>[m
[31m-      <xsl:if test="$siblings[$next-position] and (name($siblings[$next-position]) != '' and (name($siblings[$next-position]) != 'seg' or $siblings[$next-position]/@type != 'x-punct'))">[m
[31m-          <xsl:if test="$siblings[$next-position]/@type != 'x-maqqef'">[m
[31m-              <xsl:if test="$siblings[$next-position]/@type != 'x-sof-pasuq'">[m
[31m-                  <xsl:if test="conversion:startsWithPunctuation($siblings[$next-position]/text()) =  false()">[m
[31m-                      <xsl:text> </xsl:text>[m
[31m-                  </xsl:if>[m
[31m-              </xsl:if>[m
[31m-          </xsl:if>[m
[31m-      </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-    <xsl:template name="addExtraSpaceBeforeNonPunctuation">[m
[31m-        <xsl:variable name="siblings" select="../child::node()"/>[m
[31m-        <xsl:variable name="next-position" select="position() + 1"/>[m
[31m-        <xsl:variable name="text"><xsl:value-of select="$siblings[$next-position]" /></xsl:variable>[m
[31m-        [m
[31m-        <xsl:if test="$siblings[$next-position]">[m
[31m-            <xsl:if test="conversion:startsWithPunctuation($text) =  false()">[m
[31m-                <xsl:text> </xsl:text>[m
[31m-            </xsl:if>[m
[31m-        </xsl:if>[m
[31m-    </xsl:template>[m
[31m-    [m
[31m-  <xsl:template match="w" mode="jesus">[m
[31m-    <!-- Output the content followed by all the lemmas and then all the morphs. -->[m
[31m-    <xsl:apply-templates mode="jesus"/>[m
[31m-    <!--[m
[31m-        except when followed by a text node or non-printing node.[m
[31m-        This is true whether the href is output or not.[m
[31m-    -->[m
[31m-    <xsl:variable name="siblings" select="../child::node()"/>[m
[31m-    <xsl:variable name="next-position" select="position() + 1"/>[m
[31m-    <xsl:if test="$siblings[$next-position] and (name($siblings[$next-position]) != '' and (name($siblings[$next-position]) != 'seg' or $siblings[$next-position]/@type != 'x-punct'))">[m
[31m-      	<xsl:text> </xsl:text>[m
[31m-    </xsl:if>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="seg">[m
[31m-    <xsl:choose>[m
[31m-      <xsl:when test="starts-with(@type, 'color:')">[m
[31m-        <font color="{substring-before(substring-after(@type, 'color: '), ';')}"><xsl:apply-templates/></font>[m
[31m-      </xsl:when>[m
[31m-      <xsl:when test="starts-with(@type, 'font-size:')">[m
[31m-        <font size="{substring-before(substring-after(@type, 'font-size: '), ';')}"><xsl:apply-templates/></font>[m
[31m-      </xsl:when>[m
[31m-      <xsl:when test="@type = 'x-variant'">[m
[31m-        <xsl:choose>[m
[31m-        	<xsl:when test="@subType = 'x-class-1' or @subType ='x-1'">[m
[31m-	          <xsl:apply-templates/>[m
[31m-        	</xsl:when>[m
[31m-        	<xsl:otherwise>[m
[31m-        		<xsl:variable name="variantText">[m
[31m-        			<xsl:value-of select="."/>[m
[31m-        		</xsl:variable>[m
[31m-        		<sup class="note variant" title="{$variantText}">va</sup>[m
[31m-        	</xsl:otherwise>[m
[31m-        </xsl:choose>[m
[31m-      </xsl:when>[m
[31m-        <xsl:when test="$DivideHebrew = 'true'">[m
[31m-            <xsl:variable name="cssClass" select="concat('segC', position() mod 2)" />[m
[31m-            <span class='{$cssClass}'><xsl:apply-templates/></span>[m
[31m-        </xsl:when>[m
[31m-        <xsl:otherwise><xsl:apply-templates/></xsl:otherwise>[m
[31m-    </xsl:choose>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="seg" mode="jesus">[m
[31m-    <xsl:choose>[m
[31m-      <xsl:when test="starts-with(@type, 'color:')">[m
[31m-        <font color="{substring-before(substring-after(@type, 'color: '), ';')}"><xsl:apply-templates mode="jesus"/></font>[m
[31m-      </xsl:when>[m
[31m-      <xsl:when test="starts-with(@type, 'font-size:')">[m
[31m-        <font size="{substring-before(substring-after(@type, 'font-size: '), ';')}"><xsl:apply-templates mode="jesus"/></font>[m
[31m-      </xsl:when>[m
[31m-      <xsl:when test="@type = 'x-variant'">[m
[31m-        <xsl:if test="@subType = 'x-class:1' or @subType ='x-1'">[m
[31m-          <xsl:apply-templates mode="jesus"/>[m
[31m-        </xsl:if>[m
[31m-      </xsl:when>[m
[31m-      <xsl:otherwise>[m
[31m-        <xsl:apply-templates mode="jesus"/>[m
[31m-      </xsl:otherwise>[m
[31m-    </xsl:choose>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <!--=======================================================================-->[m
[31m-  <!-- expansion is OSIS, expan is TEI -->[m
[31m-  <xsl:template match="abbr">[m
[31m-    <font class="abbr">[m
[31m-      <xsl:if test="@expansion">[m
[31m-        <xsl:attribute name="title">[m
[31m-          <xsl:value-of select="@expansion"/>[m
[31m-        </xsl:attribute>[m
[31m-      </xsl:if>[m
[31m-      <xsl:if test="@expan">[m
[31m-        <xsl:attribute name="title">[m
[31m-          <xsl:value-of select="@expan"/>[m
[31m-        </xsl:attribute>[m
[31m-      </xsl:if>[m
[31m-      <xsl:apply-templates/>[m
[31m-    </font>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="abbr" mode="jesus">[m
[31m-    <font class="abbr">[m
[31m-      <xsl:if test="@expansion">[m
[31m-        <xsl:attribute name="title">[m
[31m-          <xsl:value-of select="@expansion"/>[m
[31m-        </xsl:attribute>[m
[31m-      </xsl:if>[m
[31m-      <xsl:if test="@expan">[m
[31m-        <xsl:attribute name="title">[m
[31m-          <xsl:value-of select="@expan"/>[m
[31m-        </xsl:attribute>[m
[31m-      </xsl:if>[m
[31m-      <xsl:apply-templates mode="jesus"/>[m
[31m-    </font>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="speaker[@who = 'Jesus']">[m
[31m-  	<xsl:choose>[m
[31m-	  	<xsl:when test="$RedLetterText = 'true'">[m
[31m-	    	<span class="jesus">&#160;<xsl:apply-templates mode="jesus"/></span>[m
[31m-	    </xsl:when>[m
[31m-	    <xsl:otherwise>[m
[31m-	    	<span class="speech"><xsl:apply-templates /></span>[m
[31m-	    </xsl:otherwise>[m
[31m-    </xsl:choose>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="speaker">[m
[31m-    <span class="speech"><xsl:apply-templates/></span>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="title[@subType ='x-preverse' or @subtype = 'x-preverse']">[m
[31m-        <!-- Verses handle most titles, however, if they are not in a verse, then we handle them here. -->[m
[31m-        <xsl:if test="not(./ancestor::verse)">[m
[31m-            <xsl:choose>[m
[31m-                <xsl:when test="@canonical = 'true' and @type='psalm'">[m
[31m-                    <h3 class="psalmHeading"><xsl:apply-templates/></h3>[m
[31m-                </xsl:when>[m
[31m-                <xsl:when test="@canonical = 'true'">[m
[31m-                    <h3 class="canonicalHeading"><xsl:apply-templates/></h3>[m
[31m-                </xsl:when>[m
[31m-                <xsl:otherwise>[m
[31m-                    <h3 class="heading {@type}">[m
[31m-                        <xsl:apply-templates/>[m
[31m-                    </h3>[m
[31m-                </xsl:otherwise>[m
[31m-            </xsl:choose>[m
[31m-        </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="title[@subType ='x-preverse' or @subtype = 'x-preverse']" mode="jesus">[m
[31m-  <!-- Done by a line in [verse][m
[31m-    <h3 class="heading">[m
[31m-      <xsl:apply-templates/>[m
[31m-    </h3>[m
[31m-  -->[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="title[@level]">[m
[31m-    <!-- Always show canonical titles or if headings is turned on -->[m
[31m-    <xsl:if test="@canonical = 'true' or $Headings = 'true'">[m
[31m-      <xsl:choose>[m
[31m-        <xsl:when test="@level = '1'">[m
[31m-          <h1 class="level"><xsl:apply-templates/></h1>[m
[31m-        </xsl:when>[m
[31m-        <xsl:when test="@level = '2'">[m
[31m-          <h2 class="level"><xsl:apply-templates/></h2>[m
[31m-        </xsl:when>[m
[31m-        <xsl:when test="@level = '3'">[m
[31m-          <h3 class="level"><xsl:apply-templates/></h3>[m
[31m-        </xsl:when>[m
[31m-        <xsl:when test="@level = '4'">[m
[31m-          <h4 class="level"><xsl:apply-templates/></h4>[m
[31m-        </xsl:when>[m
[31m-        <xsl:when test="@level = '5'">[m
[31m-          <h5 class="level"><xsl:apply-templates/></h5>[m
[31m-        </xsl:when>[m
[31m-        <xsl:otherwise>[m
[31m-          <h6 class="level"><xsl:apply-templates/></h6>[m
[31m-        </xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-    </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="title[@level]" mode="jesus">[m
[31m-    <!-- Always show canonical titles or if headings is turned on -->[m
[31m-    <xsl:if test="@canonical = 'true' or $Headings = 'true'">[m
[31m-      <xsl:choose>[m
[31m-        <xsl:when test="@level = '1'">[m
[31m-          <h1 class="level"><xsl:apply-templates/></h1>[m
[31m-        </xsl:when>[m
[31m-        <xsl:when test="@level = '2'">[m
[31m-          <h2 class="level"><xsl:apply-templates/></h2>[m
[31m-        </xsl:when>[m
[31m-        <xsl:when test="@level = '3'">[m
[31m-          <h3 class="level"><xsl:apply-templates/></h3>[m
[31m-        </xsl:when>[m
[31m-        <xsl:when test="@level = '4'">[m
[31m-          <h4 class="level"><xsl:apply-templates/></h4>[m
[31m-        </xsl:when>[m
[31m-        <xsl:when test="@level = '5'">[m
[31m-          <h5 class="level"><xsl:apply-templates/></h5>[m
[31m-        </xsl:when>[m
[31m-        <xsl:otherwise>[m
[31m-          <h6 class="level"><xsl:apply-templates/></h6>[m
[31m-        </xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-    </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  [m
[31m-  <!-- We will always show a x-gen title -->[m
[31m-  [m
[31m-  [m
[31m-  <xsl:template match="title" name="normalTile">[m
[31m-    <!-- Always show canonical titles or if headings is turned on -->[m
[31m-    <xsl:if test="@canonical = 'true' or $Headings = 'true' or @type = 'x-gen'">[m
[31m-      <xsl:choose>[m
[31m-      	<xsl:when test="@type = 'x-gen'">[m
[31m-      		<xsl:if test="$HideXGen != 'true'">[m
[31m-      		 	<h2 class="xgen">[m
[31m-      		 		<xsl:variable name="headerText">[m
[31m-      		 			<xsl:apply-templates/>[m
[31m-      		 		</xsl:variable>[m
[31m-      		 		<xsl:variable name="longHeaderText" select="jsword:com.tyndalehouse.step.core.utils.HeadingsUtil.getLongHeader($versification, $headerText)" />[m
[31m-      		 		<xsl:value-of select="$longHeaderText" />[m
[31m-      		 	</h2>[m
[31m-      		</xsl:if>[m
[31m-      	</xsl:when>[m
[31m-      	<xsl:otherwise>[m
[31m-            <xsl:choose>[m
[31m-                <!-- most parallel references only have the localised key, so can't use it -->[m
[31m-                <xsl:when test="@type='psalm'"><h3 class="psalmHeading {@type}"><xsl:apply-templates/></h3></xsl:when>[m
[31m-                <xsl:when test="@canonical = 'true'"><h3 class="canonicalHeading {@type}"><xsl:apply-templates/></h3></xsl:when>[m
[31m-                <xsl:otherwise><h2 class="heading {@type}"><xsl:apply-templates/></h2></xsl:otherwise>[m
[31m-            </xsl:choose>[m
[31m-      	</xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-    </xsl:if>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="title" mode="jesus">[m
[31m-	<xsl:call-template name="normalTile" />[m
[31m-  </xsl:template>[m
[31m-[m
[31m-    <xsl:template match="title" mode="print-cross-references">[m
[31m-        <xsl:variable name="crossRef" select=".//note[@type = 'crossReference']" />[m
[31m-        <xsl:if test="$crossRef">[m
[31m-            <xsl:variable name="osisID" select="concat(substring-before(.//note[@type = 'crossReference'][1]/@osisID, '.'), '.', substring-before(substring-after($crossRef[1]/@osisID, '.'), '.'))" />[m
[31m-            <xsl:variable name="passage" select="jswordUtils:getSafeKey($versification, $osisID)"/>[m
[31m-            <a href="#{substring-before(concat($osisID, ' '), ' ')}">[m
[31m-                <xsl:value-of select="jsword:getName($passage)"/>[m
[31m-            </a>[m
[31m-            <xsl:apply-templates select=".//note[@type = 'crossReference']" mode="print-cross-references" />[m
[31m-            <div><xsl:text>&#160;</xsl:text></div>[m
[31m-        </xsl:if>[m
[31m-    </xsl:template>[m
[31m-[m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="reference">[m
[31m-        <xsl:variable name="passage" select="jswordUtils:getSafeKey($versification, @osisRef)"/>[m
[31m-        <xsl:variable name="passageKey" select="jsword:getName($passage)" />  [m
[31m-        <xsl:variable name="encodedPassageKey" select="url:encode($passageKey)"/>[m
[31m-[m
[31m-      <xsl:choose>[m
[31m-          <xsl:when test="string-length($encodedPassageKey) = 0"><xsl:apply-templates/></xsl:when>[m
[31m-          <xsl:otherwise><a href="?version={$baseVersion}&amp;reference={$encodedPassageKey}" title="{$passageKey}" class="linkRef" xref="{$passageKey}"><xsl:apply-templates/></a></xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="reference" mode="jesus">[m
[31m-        <xsl:variable name="passage" select="jswordUtils:getSafeKey($versification, @osisRef)"/>[m
[31m-      <xsl:variable name="passageKey" select="jsword:getName($passage)" />[m
[31m-      <xsl:variable name="encodedPassageKey" select="url:encode($passageKey)"/>[m
[31m-[m
[31m-      <xsl:choose>[m
[31m-          <xsl:when test="string-length($encodedPassageKey) = 0"><xsl:apply-templates/></xsl:when>[m
[31m-          <xsl:otherwise><a href="?version={$baseVersion}&amp;reference={$encodedPassageKey}" title="{$passageKey}" xref="{$passageKey}"><xsl:apply-templates/></a></xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-[m
[31m-[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <!--=======================================================================-->[m
[31m-  <xsl:template match="caption">[m
[31m-    <div class="caption"><xsl:apply-templates/></div>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="caption" mode="jesus">[m
[31m-    <div class="caption"><xsl:apply-templates/></div>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="catchWord">[m
[31m-      <!-- If the parent has got a rd of type qere or accent, then we output Hebrew fonts for now -->[m
[31m-      <xsl:choose>[m
[31m-          <xsl:when test="count(..//rdg[@type='x-qere']) > 0"><div class="hbFontSmall"><xsl:apply-templates/> (Ketiv)</div></xsl:when>[m
[31m-          <xsl:when test="count(..//rdg) > 0"><span class="hbFontSmall"><xsl:apply-templates/></span></xsl:when>[m
[31m-          <xsl:otherwise><xsl:apply-templates/></xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="catchWord" mode="jesus">[m
[31m-    <xsl:apply-templates mode="jesus"/>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <!--[m
[31m-      <cell> is handled shortly after <table> below and thus does not appear[m
[31m-      here.[m
[31m-  -->[m
[31m-  [m
[31m-  <xsl:template match="closer">[m
[31m-    <xsl:apply-templates/>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="closer" mode="jesus">[m
[31m-    <xsl:apply-templates mode="jesus"/>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="date">[m
[31m-    <xsl:apply-templates/>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="date" mode="jesus">[m
[31m-    <xsl:apply-templates mode="jesus"/>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="divineName">[m
[31m-  <span class="small-caps">&#160;<xsl:apply-templates /></span>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="divineName" mode="jesus">[m
[31m-  <span class="small-caps">&#160;<xsl:apply-templates /></span>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="figure">[m
[31m-    <div class="figure">[m
[31m-      <xsl:choose>[m
[31m-        <xsl:when test="starts-with(@src, '/')">[m
[31m-          <img src="{concat($baseURL, @src)}"/>   <!-- FIXME: Not necessarily an image... -->[m
[31m-        </xsl:when>[m
[31m-        <xsl:otherwise>[m
[31m-          <img src="{concat($baseURL, '/',  @src)}"/>   <!-- FIXME: Not necessarily an image... -->[m
[31m-        </xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-      <xsl:apply-templates/>[m
[31m-    </div>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="figure" mode="jesus">[m
[31m-    <div class="figure">[m
[31m-      <xsl:choose>[m
[31m-        <xsl:when test="starts-with(@src, '/')">[m
[31m-          <img src="{concat($baseURL, @src)}"/>   <!-- FIXME: Not necessarily an image... -->[m
[31m-        </xsl:when>[m
[31m-        <xsl:otherwise>[m
[31m-          <img src="{concat($baseURL, '/',  @src)}"/>   <!-- FIXME: Not necessarily an image... -->[m
[31m-        </xsl:otherwise>[m
[31m-      </xsl:choose>[m
[31m-      <xsl:apply-templates mode="jesus"/>[m
[31m-    </div>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="foreign"><em class="foreign">&#160;<xsl:apply-templates/></em><xsl:call-template name="addExtraSpaceBeforeNonPunctuation" /></xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="foreign" mode="jesus">[m
[31m-    <em class="foreign">&#160;<xsl:apply-templates mode="jesus"/></em><xsl:call-template name="addExtraSpaceBeforeNonPunctuation" />[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <!-- This is a subheading. -->[m
[31m-  <xsl:template match="head//head">[m
[31m-    <h5 class="head"><xsl:apply-templates/></h5>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <!-- This is a top-level heading. -->[m
[31m-  <xsl:template match="head">[m
[31m-    <h4 class="head"><xsl:apply-templates/></h4>[m
[31m-  </xsl:template>[m
[31m-  [m
[31m-  <xsl:template match="index">[m
[31m-    <a name="index{@id}" class="index"/>[m
[31m-  </xsl:template>[m
[31m-[m
[31m-  <xsl:template match="inscription">[m
[31m-      <xsl:choose>[m
[31m-          <xsl:when test="@type = 'x-p-inscription'"><span class="x-p-insc